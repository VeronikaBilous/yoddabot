import telebot
import os
import json
import random
import threading
import schedule
import time
from flask import Flask, request
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv('TOKEN')
CHAT_ID = int(os.getenv('CHAT_ID'))
bot = telebot.TeleBot(TOKEN)

# Flask app
app = Flask(__name__)

@app.route(f'/{TOKEN}', methods=['POST'])
def receive_update():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
    return 'ok', 200

@app.route('/')
def index():
    return "‚úÖ Webhook –∞–∫—Ç–∏–≤–Ω–∏–π!"

# –î–∞–Ω—ñ
tasks = {}
user_states = {}

if os.path.exists("tasks.json"):
    with open("tasks.json", "r", encoding="utf-8") as f:
        tasks = json.load(f)

for user_id in list(tasks.keys()):
    if isinstance(tasks[user_id], list):
        tasks[user_id] = {"–°–ø–∏—Å–æ–∫": tasks[user_id]}

def save_tasks():
    import shutil
    if os.path.exists("tasks.json"):
        shutil.copy("tasks.json", "tasks_backup.json")
    with open("tasks.json", "w", encoding="utf-8") as f:
        json.dump(tasks, f, ensure_ascii=False, indent=4)

def power_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("‚ö° Power"))
    return markup

def inline_menu():
    markup = telebot.types.InlineKeyboardMarkup()
    markup.row(
        telebot.types.InlineKeyboardButton("üìã –°–ø–∏—Å–∫–∏", callback_data="list_lists"),
        telebot.types.InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏", callback_data="choose_list_for_add")
    )
    markup.row(
        telebot.types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏", callback_data="choose_list_for_finish"),
        telebot.types.InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", callback_data="delete_list")
    )
    markup.row(
        telebot.types.InlineKeyboardButton("‚ú® –ù–∞—Ç—Ö–Ω–µ–Ω–Ω—è", callback_data="inspiration"),
        telebot.types.InlineKeyboardButton("‚ÑπÔ∏è –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è", callback_data="instruction")
    )
    return markup

motivational_phrases = [
    "‚ú® –ù–∞–≤—ñ—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å ‚Äî —Ü–µ –ø—Ä–æ–≥—Ä–µ—Å!",
    "üöÄ –¢–∏ –º–æ–∂–µ—à –±—ñ–ª—å—à–µ, –Ω—ñ–∂ –∑–¥–∞—î—Ç—å—Å—è!",
    "üåü –í–µ–ª–∏–∫–∏–π —à–ª—è—Ö –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –º–∞–ª–æ–≥–æ –∫—Ä–æ–∫—É!",
    "üî• –£—Å–ø—ñ—Ö ‚Äî —Ü–µ —Å–ø—Ä–∞–≤–∞ —Ä—ñ—à—É—á–æ—Å—Ç—ñ.",
    "üí° –í—ñ—Ä–∞ –≤ —Å–µ–±–µ —Ç–≤–æ—Ä–∏—Ç—å –¥–∏–≤–∞!",
    "üå± –ö–æ–∂–µ–Ω –¥–µ–Ω—å ‚Äî –Ω–æ–≤–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å.",
    "üî• –°—å–æ–≥–æ–¥–Ω—ñ —Ç–≤—ñ–π –¥–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–º–æ–≥!",
    "üèÜ –í–µ–ª–∏–∫–∞ –º—Ä—ñ—è ‚Äî –ø–æ–ª–æ–≤–∏–Ω–∞ —É—Å–ø—ñ—Ö—É!"
]

morning_mantras = [
    "üåû –ü—Ä–æ–∫–∏–Ω—å—Å—è —ñ –∑–≥–∞–¥–∞–π: —Å–∏–ª–∞ –≤ —Ç–æ–±—ñ –≤–∂–µ —î!",
    "üåü –°—å–æ–≥–æ–¥–Ω—ñ —Ç–≤—ñ–π –¥–µ–Ω—å –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –ø–æ—á–∏–Ω–∞–Ω—å!",
    "üöÄ –†—É—à–∞–π —É–ø–µ—Ä–µ–¥, –Ω–µ –æ–∑–∏—Ä–∞—é—á–∏—Å—å –Ω–∞–∑–∞–¥."
]

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "üõ°Ô∏è –ü—Ä–∏–≤—ñ—Ç, –ø–∞–¥–∞–≤–∞–Ω–µ! Power –∫–Ω–æ–ø–∫—É —à—É–∫–∞–π, —ñ —à–ª—è—Ö —Å–≤—ñ–π —Ç–∏ –∑–Ω–∞–π–¥–µ—à!", reply_markup=power_keyboard())

@bot.message_handler(func=lambda message: message.text == "‚ö° Power")
def send_main_menu(message):
    bot.send_message(message.chat.id, "üìà –û–±–∏—Ä–∞–π —à–ª—è—Ö —Å–≤—ñ–π:", reply_markup=inline_menu())

# ... [‚ùó –¢–≤—ñ–π —ñ—Å–Ω—É—é—á–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ callback_query_handler —Å—é–¥–∏ –≤—Å—Ç–∞–≤–ª—è—î—à –±–µ–∑ –∑–º—ñ–Ω]
# ... [‚ùó –¢–≤—ñ–π –æ–±—Ä–æ–±–Ω–∏–∫ message_handler —Ç–∞–∫–æ–∂ –≤—Å—Ç–∞–≤–ª—è—î—à —Å—é–¥–∏ –±–µ–∑ –∑–º—ñ–Ω]

def morning_greeting():
    phrase = random.choice(morning_mantras)
    bot.send_message(CHAT_ID, f"üí• –î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É, –ø–∞–¥–∞–≤–∞–Ω–µ! {phrase}", reply_markup=power_keyboard())

schedule.every().day.at("10:00").do(morning_greeting)

# –§–æ–Ω–æ–≤–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(60)

threading.Thread(target=run_scheduler).start()

# üëâ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook —ñ –∑–∞–ø—É—Å–∫ Flask
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url='https://yoddabot.onrender.com/' + TOKEN)
    app.run(host="0.0.0.0", port=8080)
