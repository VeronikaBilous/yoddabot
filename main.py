import telebot
import os
import json
import random
import threading
import schedule
import time
from flask import Flask, request
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv('TOKEN')
CHAT_ID = int(os.getenv('CHAT_ID'))
bot = telebot.TeleBot(TOKEN)

# –î–∞–Ω—ñ
tasks = {}
user_states = {}

if os.path.exists("tasks.json"):
    with open("tasks.json", "r", encoding="utf-8") as f:
        tasks = json.load(f)

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∑—ñ —Å–ø–∏—Å–∫—É —É —Å–ª–æ–≤–Ω–∏–∫
for user_id in list(tasks.keys()):
    if isinstance(tasks[user_id], list):
        tasks[user_id] = {"–°–ø–∏—Å–æ–∫": tasks[user_id]}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
def save_tasks():
    import shutil
    if os.path.exists("tasks.json"):
        shutil.copy("tasks.json", "tasks_backup.json")
    with open("tasks.json", "w", encoding="utf-8") as f:
        json.dump(tasks, f, ensure_ascii=False, indent=4)

def power_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("‚ö° Power"))
    return markup

def inline_menu():
    markup = telebot.types.InlineKeyboardMarkup()
    markup.row(
        telebot.types.InlineKeyboardButton("üìã –°–ø–∏—Å–∫–∏", callback_data="list_lists"),
        telebot.types.InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏", callback_data="choose_list_for_add")
    )
    markup.row(
        telebot.types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏", callback_data="choose_list_for_finish"),
        telebot.types.InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", callback_data="delete_list")
    )
    markup.row(
        telebot.types.InlineKeyboardButton("‚ú® –ù–∞—Ç—Ö–Ω–µ–Ω–Ω—è", callback_data="inspiration"),
        telebot.types.InlineKeyboardButton("‚ÑπÔ∏è –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è", callback_data="instruction")
    )
    return markup

motivational_phrases = [
    "‚ú® –ù–∞–≤—ñ—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å ‚Äî —Ü–µ –ø—Ä–æ–≥—Ä–µ—Å!",
    "üöÄ –¢–∏ –º–æ–∂–µ—à –±—ñ–ª—å—à–µ, –Ω—ñ–∂ –∑–¥–∞—î—Ç—å—Å—è!",
    "üåü –í–µ–ª–∏–∫–∏–π —à–ª—è—Ö –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –º–∞–ª–æ–≥–æ –∫—Ä–æ–∫—É!",
    "üî• –£—Å–ø—ñ—Ö ‚Äî —Ü–µ —Å–ø—Ä–∞–≤–∞ —Ä—ñ—à—É—á–æ—Å—Ç—ñ.",
    "üí° –í—ñ—Ä–∞ –≤ —Å–µ–±–µ —Ç–≤–æ—Ä–∏—Ç—å –¥–∏–≤–∞!",
    "üå± –ö–æ–∂–µ–Ω –¥–µ–Ω—å ‚Äî –Ω–æ–≤–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å.",
    "üî• –°—å–æ–≥–æ–¥–Ω—ñ —Ç–≤—ñ–π –¥–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–º–æ–≥!",
    "üåü –°—å–æ–≥–æ–¥–Ω—ñ —ñ–¥–µ–∞–ª—å–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –∫—Ä–æ–∫—ñ–≤!",
    "üèÜ –í–µ–ª–∏–∫–∞ –º—Ä—ñ—è ‚Äî –ø–æ–ª–æ–≤–∏–Ω–∞ —É—Å–ø—ñ—Ö—É!",
    "üõ§Ô∏è –®–ª—è—Ö —É —Ç–∏—Å—è—á—É –º–∏–ª—å –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –æ–¥–Ω–æ–≥–æ –∫—Ä–æ–∫—É.",
    "üí• –ù–∞–π–∫—Ä–∞—â–∏–π —á–∞—Å –¥–ª—è –¥—ñ–π ‚Äî –∑–∞—Ä–∞–∑!",
    "üß† –í—á–∏—Å—å, —Ä–æ—Å—Ç–∏ —ñ —Å–≤—ñ—Ç –≤—ñ–¥–∫—Ä–∏—î—Ç—å—Å—è –ø–µ—Ä–µ–¥ —Ç–æ–±–æ—é!"
]

morning_mantras = [
    "üåû –ü—Ä–æ–∫–∏–Ω—å—Å—è —ñ –∑–≥–∞–¥–∞–π: —Å–∏–ª–∞ –≤ —Ç–æ–±—ñ –≤–∂–µ —î!",
    "üåü –°—å–æ–≥–æ–¥–Ω—ñ —Ç–≤—ñ–π –¥–µ–Ω—å –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –ø–æ—á–∏–Ω–∞–Ω—å!",
    "üöÄ –†—É—à–∞–π —É–ø–µ—Ä–µ–¥, –Ω–µ –æ–∑–∏—Ä–∞—é—á–∏—Å—å –Ω–∞–∑–∞–¥."
]

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "üõ°Ô∏è –ü—Ä–∏–≤—ñ—Ç, –ø–∞–¥–∞–≤–∞–Ω–µ! Power –∫–Ω–æ–ø–∫—É —à—É–∫–∞–π, —ñ —à–ª—è—Ö —Å–≤—ñ–π —Ç–∏ –∑–Ω–∞–π–¥–µ—à!", reply_markup=power_keyboard())

@bot.message_handler(func=lambda message: message.text == "‚ö° Power")
def send_main_menu(message):
    bot.send_message(message.chat.id, "üìà –û–±–∏—Ä–∞–π —à–ª—è—Ö —Å–≤—ñ–π:", reply_markup=inline_menu())

@bot.callback_query_handler(func=lambda call: True)
def handle_inline_buttons(call):
    user_id = str(call.message.chat.id)
    if user_id not in tasks:
        tasks[user_id] = {}
    try:
        if call.data == "list_lists":
            if not tasks[user_id]:
                bot.send_message(call.message.chat.id, "üì≠ –°–ø–∏—Å–∫—ñ–≤ —É —Ç–µ–±–µ —â–µ –Ω–µ–º–∞.", reply_markup=power_keyboard())
            else:
                msg = "üìã –¢–≤–æ—ó —Å–ø–∏—Å–∫–∏:\n"
                for list_name, items in tasks[user_id].items():
                    sorted_items = sorted(items, key=lambda x: 0 if x.startswith("!") else 1)
                    msg += f"\nüîπ {list_name}:\n" + "\n".join(f"- {item}" for item in sorted_items)
                bot.send_message(call.message.chat.id, msg, reply_markup=power_keyboard())
        elif call.data == "choose_list_for_add":
            markup = telebot.types.InlineKeyboardMarkup()
            for name in tasks[user_id]:
                markup.add(telebot.types.InlineKeyboardButton(name, callback_data=f"add_to:{name}"))
            if len(tasks[user_id]) < 10:
                markup.add(telebot.types.InlineKeyboardButton("‚ûï –ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫", callback_data="create_new_list"))
            bot.send_message(call.message.chat.id, "‚ûï –û–±–µ—Ä–∏ —Å–ø–∏—Å–æ–∫ –∞–±–æ —Å—Ç–≤–æ—Ä–∏ –Ω–æ–≤–∏–π:", reply_markup=markup)
        elif call.data.startswith("add_to:"):
            list_name = call.data.split(":")[1]
            user_states[user_id] = f"adding_to:{list_name}"
            bot.send_message(call.message.chat.id, f"üìù –í–≤–µ–¥–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ / . –í—Å—ñ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –¥–æ —Å–ø–∏—Å–∫—É: {list_name}", reply_markup=power_keyboard())
        elif call.data == "create_new_list":
            user_states[user_id] = "creating_new_list"
            bot.send_message(call.message.chat.id, "üìÇ –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫—É:", reply_markup=power_keyboard())
        elif call.data == "choose_list_for_finish":
            if not tasks[user_id]:
                bot.send_message(call.message.chat.id, "üì≠ –ù–µ–º–∞—î —Å–ø–∏—Å–∫—ñ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.", reply_markup=power_keyboard())
            else:
                markup = telebot.types.InlineKeyboardMarkup()
                for name in tasks[user_id]:
                    markup.add(telebot.types.InlineKeyboardButton(name, callback_data=f"finish_from:{name}"))
                bot.send_message(call.message.chat.id, "‚úÖ –û–±–µ—Ä–∏ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è:", reply_markup=markup)
        elif call.data.startswith("finish_from:"):
            list_name = call.data.split(":")[1]
            user_states[user_id] = f"finishing_from:{list_name}"
            tasks_list = tasks[user_id][list_name]
            if tasks_list:
                msg = f"üìã –ó–∞–≤–¥–∞–Ω–Ω—è —É —Å–ø–∏—Å–∫—É {list_name}:\n"
                msg += "\n".join(f"{i+1}. {task}" for i, task in enumerate(tasks_list))
                msg += "\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É –∞–±–æ –¥–µ—Ñ—ñ—Å (1,2 –∞–±–æ 1-3):"
                bot.send_message(call.message.chat.id, msg, reply_markup=power_keyboard())
            else:
                bot.send_message(call.message.chat.id, "üì≠ –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=power_keyboard())
        elif call.data == "delete_list":
            if not tasks[user_id]:
                bot.send_message(call.message.chat.id, "üì≠ –í–∏–¥–∞–ª—è—Ç–∏ –Ω—ñ—á–æ–≥–æ. –ù–µ–º–∞—î —Å–ø–∏—Å–∫—ñ–≤.", reply_markup=power_keyboard())
            else:
                markup = telebot.types.InlineKeyboardMarkup()
                for name in tasks[user_id]:
                    markup.add(telebot.types.InlineKeyboardButton(f"üóëÔ∏è {name}", callback_data=f"delete:{name}"))
                bot.send_message(call.message.chat.id, "üóëÔ∏è –û–±–µ—Ä–∏ —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=markup)
        elif call.data.startswith("delete:"):
            list_name = call.data.split(":")[1]
            if list_name in tasks[user_id]:
                del tasks[user_id][list_name]
                save_tasks()
                bot.send_message(call.message.chat.id, f"üóëÔ∏è –°–ø–∏—Å–æ–∫ {list_name} –≤–∏–¥–∞–ª–µ–Ω–æ.", reply_markup=power_keyboard())
            else:
                bot.send_message(call.message.chat.id, "‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=power_keyboard())
        elif call.data == "inspiration":
            phrase = random.choice(motivational_phrases)
            bot.send_message(call.message.chat.id, phrase, reply_markup=power_keyboard())
        elif call.data == "instruction":
            bot.send_message(call.message.chat.id, "‚ÑπÔ∏è –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:\n‚ö° Power ‚Äî –≥–æ–ª–æ–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞.\n‚ûï –î–æ–¥–∞–π —á–µ—Ä–µ–∑ / –∫—ñ–ª—å–∫–∞ –∑–∞–≤–¥–∞–Ω—å.\n‚úÖ –ó–∞–≤–µ—Ä—à—É–π –∑–∞ –Ω–æ–º–µ—Ä–∞–º–∏.\nüìã –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π ! –¥–ª—è –≤–∞–∂–ª–∏–≤–∏—Ö.\nüóëÔ∏è –í–∏–¥–∞–ª—è–π –∑–∞–π–≤—ñ —Å–ø–∏—Å–∫–∏.\n–ú–∞—î—à –º–∞–∫—Å–∏–º—É–º 10 —Å–ø–∏—Å–∫—ñ–≤!", reply_markup=power_keyboard())
        bot.answer_callback_query(call.id)
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤ callback: {call.data}\n{e}")
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—Ç–∏—Å–Ω–∏ ‚ö° Power.", reply_markup=power_keyboard())

@app.route(f"/{TOKEN}", methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "OK", 200
    else:
        return "Invalid content type", 403

@app.route('/')
def index():
    return '‚ö°Ô∏è Webhook –∞–∫—Ç–∏–≤–Ω–∏–π. YoddaBot –Ω–∞ –∑–≤‚Äô—è–∑–∫—É!'

if __name__ == "__main__":
    import requests
    webhook_url = f"https://yoddabot.onrender.com/{TOKEN}"
    set_url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
    requests.post(set_url, data={"url": webhook_url})
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
    
